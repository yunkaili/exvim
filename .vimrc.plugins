" File              : .vimrc.plugins
" Author            : Yunkai Li <yunkai.li@hotmail.com>
" Date              : 17.09.2020
" Last Modified Date: 01.02.2021
" Last Modified By  : Yunkai Li <yunkai.li@hotmail.com>

" man.vim: invoked by :Man {name}
source $VIMRUNTIME/ftplugin/man.vim

" general plugins {{{
Plug 'junegunn/vim-plug'


" vim-which-key
" ---------------------------------------------------
Plug 'liuchengxu/vim-which-key'
let g:mapleader = "\<Space>"
nnoremap <silent><nowait> <leader> :<c-u>WhichKey '<Space>'<CR>
vnoremap <silent> <leader> :<c-u>WhichKeyVisual '<Space>'<CR>
set timeoutlen=10

" exvim project

" ex-config:
" ---------------------------------------------------
Plug 'exvim/ex-config'
nnoremap <unique> <leader>ve :call exconfig#edit_cur_vimentry ()<CR>

" ex-utility:
" ---------------------------------------------------
Plug 'exvim/ex-utility'

" nnoremap <unique> <silent> <Leader>bd :EXbd<CR>
" nnoremap <unique> <silent> <C-l> :EXbn<CR>
" nnoremap <unique> <silent> <C-h> :EXbp<CR>
" nnoremap <unique> <silent> <C-Tab> :EXbalt<CR>
" nnoremap <unique> <silent> <Leader><Tab> :EXsw<CR>
" nmap <unique> <silent> <Leader><Esc> :EXgp<CR><ESC>

" ex-vimentry
" ---------------------------------------------------
Plug 'exvim/ex-vimentry'

" ex-project
" ---------------------------------------------------
Plug 'exvim/ex-project'

" ex-gsearch
" ---------------------------------------------------
Plug 'exvim/ex-gsearch'

" call exgsearch#register_hotkey( 100, 0, '<leader>gs', ":EXGSearchToggle<CR>", 'Toggle global search window.' )
" call exgsearch#register_hotkey( 101, 0, '<leader>gg', ":EXGSearchCWord<CR>", 'Search current word.' )
" call exgsearch#register_hotkey( 102, 0, '<leader><S-f>', ":GS ", 'Shortcut for :GS' )

" ex-tagselect
" ---------------------------------------------------
Plug 'exvim/ex-tags'

" call extags#register_hotkey( 100, 0, '<leader>ts', ":EXTagsToggle<CR>", 'Toggle tag select window.' )
" call extags#register_hotkey( 101, 0, '<leader>]', ":EXTagsCWord<CR>", 'Tag select current word.' )
" DISABLE: nnoremap <unique> <leader>] :exec 'ts ' . expand('<cword>')<CR>

" ex-symbol
" ---------------------------------------------------
Plug 'exvim/ex-symbol'

" call exsymbol#register_hotkey( 100, 0, '<leader>ss', ":EXSymbolList<CR>", 'List all symbols.' )
" call exsymbol#register_hotkey( 101, 0, '<leader>sq', ":EXSymbolOpen<CR>", 'Open symbols window.' )
" call exsymbol#register_hotkey( 102, 0, '<leader>sg', ":EXSymbolCWord<CR>", 'List symbols contains current word.' )

if has('gui_running')
    if has ('mac')
        call exsymbol#register_hotkey( 102, 0, 'Ò', ":EXSymbolList<CR>:redraw<CR>/", 'List all symbols and stay in search mode.' )
    else
        call exsymbol#register_hotkey( 102, 0, '<M-L>', ":EXSymbolList<CR>:redraw<CR>/", 'List all symbols and stay in search mode.' )
    endif
endif
let g:ex_symbol_select_cmd = 'TS'

" ex-cscope
" ---------------------------------------------------
Plug 'exvim/ex-cscope'

" call excscope#register_hotkey( 100, 0, '<leader>cd', ":EXCSToggle<CR>", 'Toggle cscope window.' )

" ex-qfix
" ---------------------------------------------------
Plug 'exvim/ex-qfix'

" call exqfix#register_hotkey( 100, 0, '<leader>qf', ":EXQFixToggle<CR>", 'Toggle quickfix window.' )
" call exqfix#register_hotkey( 101, 0, '<leader>qq', ":EXQFixPaste<CR>", 'Open quickfix window and paste error list from register *.' )

" ex-hierarchy
" ---------------------------------------------------
Plug 'exvim/ex-hierarchy'

nnoremap <unique> <leader>hv :EXHierarchyCWord<CR>

" switch class/funcion name into different style
" ---------------------------------------------------
Plug 'yuxki/vim-switch-name'
let g:switchname_popup_upper_camel=1
let g:switchname_popup_lower_camel=1
let g:switchname_popup_upper_snake=1
let g:switchname_popup_lower_snake=1
let g:switchname_popup_upper_kebab=1
let g:switchname_popup_lower_kebab=1
nnoremap <unique><silent> <C-q> :SwitchName<CR>

" DoGe is a (Do)cumentation (Ge)nerator which will generate a proper documentation skeleton based on certain expressions (mainly functions).
" ---------------------------------------------------
Plug 'kkoomen/vim-doge', { 'do': { -> doge#install() } }
let g:doge_doc_standard_python = 'google'

" majutsushi/tagbar
" ---------------------------------------------------
" Plug 'majutsushi/tagbar'
Plug 'preservim/tagbar'

nnoremap <unique> <silent> <F4> :TagbarToggle<CR>

" if ctags bin exist"
" let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
let g:tagbar_sort = 1
let g:tagbar_map_preview = '<CR>'
if has('gui_running')
    let g:tagbar_map_close = '<Esc>'
else
    let g:tagbar_map_close = '<leader><Esc>'
endif
let g:tagbar_map_zoomwin = '<Space>'
let g:tagbar_zoomwidth = 88
let g:tagbar_autofocus = 1
let g:tagbar_iconchars = ['+', '-']
let g:tagbar_compact = 1

" use command ':TagbarGetTypeConfig lang' change your settings
let g:tagbar_type_c = {
    \ 'kinds' : [
        \ 'd:macros:0:0',
        \ 'p:prototypes:0:0',
        \ 'g:enums',
        \ 'e:enumerators:0:0',
        \ 't:typedefs:0:0',
        \ 's:structs',
        \ 'u:unions',
        \ 'm:members:0:0',
        \ 'v:variables:0:0',
        \ 'f:functions',
    \ ],
\ }
let g:tagbar_type_cpp = {
    \ 'kinds' : [
        \ 'd:macros:0:0',
        \ 'p:prototypes:0:0',
        \ 'g:enums',
        \ 'e:enumerators:0:0',
        \ 't:typedefs:0:0',
        \ 'n:namespaces',
        \ 'c:classes',
        \ 's:structs',
        \ 'u:unions',
        \ 'f:functions',
        \ 'm:members:0:0',
        \ 'v:variables:0:0',
    \ ],
\ }

" matchit.zip: invoke by %
" ---------------------------------------------------
Plug 'vim-scripts/matchit.zip'

" SearchComplete: invoke by /
" ---------------------------------------------------
Plug 'vim-scripts/SearchComplete'

" Vim Themes
" ---------------------------------------------------
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'joshdick/onedark.vim', { 'as': 'onedark'}
Plug 'arcticicestudio/nord-vim'
let g:nord_cursor_line_number_background = 1
let g:nord_bold_vertical_split_line = 1
let g:nord_uniform_diff_background = 1

" cctree
" ---------------------------------------------------
Plug 'hari-rangarajan/CCTree'

" lightline
" ---------------------------------------------------
Plug 'itchyny/lightline.vim'

let g:lightline = {
      \ 'colorscheme': 'onedark',
      \ 'active': {
      \   'left': [
      \             [ 'mode', 'paste' ],
      \             [ 'path' ],
      \             [ 'readonly', 'modified' ] ]
      \ },
      \ 'component': {
      \   'path': '%F',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' },
      \ }

" tabline plugin for lightline
" ---------------------------------------------------
Plug 'mengelbrecht/lightline-bufferline'

let g:lightline#bufferline#show_number  = 2
let g:lightline#bufferline#shorten_path = 0
let g:lightline#bufferline#unnamed      = '[No Name]'
let g:lightline.tabline          = {'left': [['buffers']], 'right': [['close']]}
let g:lightline.component_expand = {'buffers': 'lightline#bufferline#buffers'}
let g:lightline.component_type   = {'buffers': 'tabsel'}

autocmd BufWritePost,TextChanged,TextChangedI * call lightline#update()

" ctrlp: invoke by <ctrl-p>
" Full path fuzzy file, buffer, mru, tag, ... finder for Vim.
" ---------------------------------------------------
" Plug 'kien/ctrlp.vim'
" let g:ctrlp_working_path_mode = ''
" let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:10,results:10'
" let g:ctrlp_follow_symlinks = 2
" let g:ctrlp_max_files = 0 " Unset cap of 10,000 files so we find everything
" let g:ctrlp_map = '<c-p>'
" nnoremap <unique> <leader>bs :CtrlPBuffer<CR>

" vim-surround: invoke when you select words and press 's'
" ---------------------------------------------------
Plug 'tpope/vim-surround'

xmap s <Plug>VSurround

" nerdtree: invoke by <leader>n:NERDTreeToggle
" ---------------------------------------------------
Plug 'preservim/nerdtree'

let g:NERDTreeChDirMode=0
let g:NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
let g:NERDTreeKeepTreeInNewTab=1
let g:NERDTreeMouseMode = 0
let g:NERDTreeMapToggleZoom = '<F2>'
let g:NERDTreeQuitOnOpen=0
let g:NERDTreeShowBookmarks=1
let g:NERDTreeShowHidden=1
let g:NERDTreeWinSize = 30
let g:nerdtree_tabs_open_on_gui_startup=0
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeAutoDeleteBuffer = 1
map <leader>n :NERDTreeToggle<CR>
nmap <leader>r :NERDTreeFocus<cr>R<c-w><c-p>

" Keep NERDTree windows fixed
" If more than one window and previous buffer was NERDTree, go back to it.
autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr('$') > 1 | b# | endif
let g:plug_window = 'noautocmd vertical topleft new'

" nerdcommenter: invoke by <leader>c<space>, <leader>cl, <leader>cu, <F11> or <C-F11>
" ---------------------------------------------------
Plug 'scrooloose/nerdcommenter'

let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDCompactSexyComs = 1
let g:NERDToggleCheckAllLines = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDCustomDelimiters = {
            \ 'vimentry': { 'left': '--' },
            \ }

" A plugin of NERDTree showing git status flags.
" ---------------------------------------------------
Plug 'Xuyuanp/nerdtree-git-plugin'

let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }


" ALE (Asynchronous Lint Engine) is a plugin providing linting (syntax checking and semantic errors) and code-fixing
" ---------------------------------------------------
Plug 'dense-analysis/ale'
let b:ale_linters = ['pylint']
let b:ale_fixers = ['autoflake', 'isort', 'black']
" Disable warnings about trailing whitespace for Python files.
let b:ale_warn_about_trailing_whitespace = 0
" https://github.com/dense-analysis/ale/issues/1472
let g:ale_python_pylint_change_director = 0
" Set this variable to 1 to fix files when you save them.
let g:ale_fix_on_save = 1

" vim-header
" ---------------------------------------------------
Plug 'alpertuna/vim-header'

let g:header_field_author = 'Yunkai Li'
let g:header_field_author_email = 'yunkai.li@hotmail.com'
let g:header_auto_add_header = 0
map <F2> :AddHeader<CR>

" Track the engine.
" ---------------------------------------------------
Plug 'SirVer/ultisnips'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<F3>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" Snippets are separated from the engine. Add this if you want them:
" ---------------------------------------------------
Plug 'honza/vim-snippets'

" Conquer of Completion
" ---------------------------------------------------
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [
    \ 'coc-clangd',
    \ 'coc-git',
    \ 'coc-jedi',
    \ 'coc-json',
    \ 'coc-marketplace',
    \ 'coc-pairs',
    \ 'coc-pyright',
    \ 'coc-sh',
    \ 'coc-snippets',
    \ 'coc-symbol-line',
    \ ]

" \ 'coc-pydocstring'
" \ 'coc-explorer' https://github.com/weirongxu/coc-explorer

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
" if has('nvim-0.4.0') || has('patch-8.2.0750')
  " nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  " nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  " inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  " inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  " vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  " vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
" endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
" nmap <silent> <C-s> <Plug>(coc-range-select)
" xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
" nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
" nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
" nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
" nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
" nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
" nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
" nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
" nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" coc-extensions configuration
" coc-highlight
" autocmd CursorHold * silent call CocActionAsync('highlight')
" coc-docstring
" nmap <silent> <C-_> <Plug>(coc-codeaction-line)
" xmap <silent> <C-_> <Plug>(coc-codeaction-selected)


" undotree: invoke by <Leader>u
" ---------------------------------------------------
Plug 'mbbill/undotree'

nnoremap <leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1
let g:undotree_WindowLayout = 4

" NOTE: this will prevent undotree closed then jump to minibufexpl
function! g:CloseUndotree()
    call UndotreeHide()
    call ex#window#goto_edit_window()
endfunction

function g:Undotree_CustomMap()
    if has('gui_running')
        nnoremap <silent> <script> <buffer> <ESC> :call g:CloseUndotree()<CR>
    else
        nnoremap <silent> <script> <buffer> <leader><ESC> :call g:CloseUndotree()<CR>
    endif
endfunction

" vim-easy-align: invoke by gaip
" ---------------------------------------------------
Plug 'junegunn/vim-easy-align'

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap <leader>a <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap <leader>a <Plug>(EasyAlign)

" vim-easymotion: invoke by <leader><leader> w,b,e,ge,f,F,h,i,j,k,/
" ---------------------------------------------------
Plug 'easymotion/vim-easymotion'

map <leader><leader>/ <Plug>(easymotion-sn)
omap <leader><leader>/ <Plug>(easymotion-tn)
map <leader><leader>j <Plug>(easymotion-j)
map <leader><leader>k <Plug>(easymotion-k)
map <leader><leader>l <Plug>(easymotion-lineforward)
map <leader><leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" LargeFile
" ---------------------------------------------------
Plug 'vim-scripts/LargeFile'
let g:LargeFile= 5 " files >= 5MB will use LargeFile rules

" collections of language pack
" ---------------------------------------------------
" Plug 'sheerun/vim-polyglot'
" let g:polyglot_enabled = ['python', 'python-indent', 'yaml', 'c/c++', 'c++11', 'c++14', 'cmake', 'csv', 'git' ]

"}}}

" c-lang {{{

" ex-cref: invoke by <leader>cr
" ---------------------------------------------------
Plug 'exvim/ex-cref'

" this is modified for default c syntax highlight settings
" make it don't highlight error pattern
let c_gnu = 1
let c_no_curly_error = 1
let c_no_bracket_error = 1

"}}}

" vim:ts=4:sw=4:sts=4 et fdm=marker:
